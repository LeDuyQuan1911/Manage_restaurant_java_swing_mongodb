/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import java.util.ArrayList;
import org.bson.Document;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.util.List;
import org.bson.Document;
import javax.swing.*;
import org.bson.types.ObjectId;
import org.bson.types.ObjectId;
import view.GoiMon;
import view.DatBan;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.UpdateOptions;
/**
 *
 * @author kevin
 */
public class ThanhToan extends javax.swing.JFrame {
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel tablePanel;
    private int table_Number;
    
    // Assuming you have a valid ObjectId to pass
    ObjectId someObjectId = new ObjectId(); // Example ObjectId, replace with a valid one

    // Create an instance of DatBan with the idBill
    
    DatBan datBanInstance = new DatBan(idNV);
    
    public ObjectId getIdBill(){
    return idBill;
    }
    

    // Now you can call getIdBill() on this instance
    ObjectId idBill = datBanInstance.getIdBill();

    /**
     * Creates new form ThanhToan
     */
    public ThanhToan() {
        initComponents();
          // Kết nối tới cơ sở dữ liệu MongoDB và lấy dữ liệu từ collection "bill"
        displayBillInfoInTextField();
    }
    public ThanhToan(int table_Number, ObjectId idBill) {
        this.table_Number = table_Number;
        this.idBill = idBill; // Đảm bảo rằng idBill đã được khởi tạo
        initComponents();
        displayBillInfoInTextField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel1.setText("HÓA ĐƠN");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Xác nhận thanh toán");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Hủy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField2.setText("jTextField2");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Tổng tiền");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(127, 127, 127))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField2))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            // Calculate the total price

    try {
        // Connect to MongoDB database
        com.mongodb.client.MongoClient mongoClient = MongoClients.create("mongodb+srv://phucpro2104:phuc123@cluster0.7834cva.mongodb.net/");
        MongoDatabase database = mongoClient.getDatabase("restaurant");
        MongoCollection<Document> collection = database.getCollection("bill");
        Document billDocument = collection.find(new Document("idBill", this.idBill)).first();
        int totalPrice = calculateTotalPrice(database, billDocument);

        // Create a new Document object with the updated total price and payment status
        Document updatedValues = new Document();
        updatedValues.append("bill.total_price", totalPrice);
        updatedValues.append("payment_status", "paid");

        // Create a Document object with the update operation
        Document updateOperation = new Document();
        updateOperation.append("$set", updatedValues);

        // Update the document in the database
        collection.updateOne(Filters.eq("idBill", this.idBill), updateOperation);

        // Optionally, update the UI or notify the user
        JOptionPane.showMessageDialog(this, "Payment confirmed and updated in database.");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating database: " + e.getMessage());
    }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            // Close the current ThanhToan form
    this.dispose();

    // Create an instance of the DatBan form
    GoiMon goiMonForm = new GoiMon();

    // Make the DatBan form visible
    goiMonForm.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void displayBillInfoInTextField() {
    try {
        com.mongodb.client.MongoClient mongoClient = MongoClients.create("mongodb+srv://phucpro2104:phuc123@cluster0.7834cva.mongodb.net/");
        MongoDatabase database = mongoClient.getDatabase("restaurant");
        MongoCollection<Document> collection = database.getCollection("bill");

        Document billDocument = collection.find(new Document("idBill", this.idBill)).first();

        if (billDocument != null) {
            StringBuilder billInfo = new StringBuilder();
            StringBuilder billTotal = new StringBuilder();

            // Extracting and formatting each field
            Document bill = (Document) billDocument.get("bill");
            List<Document> order = (List<Document>) billDocument.get("order");
            
            billInfo.append("Bill ID: ").append(billDocument.getObjectId("idBill").toHexString()).append("\n");
            billInfo.append("Table Number: ").append(billDocument.getInteger("table_number")).append("\n");
            billInfo.append("Bill Date: ").append(bill.get("bill_date")).append("\n");
            billInfo.append("Order Details:\n");
            
            
            int maxWidth = 278; // Độ dài tối đa cho mỗi dòng

            for (Document item : order) {
                int foodId = item.getInteger("foodId");
                int quantity = item.getInteger("quantity");

                String foodName = getFoodNameFromMongoDB(database, foodId);
                int foodPrice = getFoodPriceFromMongoDB(database, foodId);
                int totalPrice = foodPrice * quantity;

                // Tạo một chuỗi định dạng cho món ăn
                String formattedLine = String.format("   Món: %-20s x%-10d %6d VND", foodName, quantity, totalPrice);

                // Cắt chuỗi nếu quá dài
                if (formattedLine.length() > maxWidth) {
                    formattedLine = formattedLine.substring(0, maxWidth);
                }

                // Thêm vào thông tin hóa đơn
                billInfo.append(formattedLine).append("\n");
                
            }
            billTotal.append(" ").append(calculateTotalPrice(database,billDocument)).append(" VND");                

            
            // Setting the text to jTextField
            jTextArea1.setText(billInfo.toString());
            jTextField2.setText(billTotal.toString());
        } else {
            jTextArea1.setText("Bill not found");
        }
    } catch (Exception e) {
        e.printStackTrace();
        jTextArea1.setText("Error connecting to MongoDB: " + e.getMessage());
    }
}   
    
       // You need to implement this method to calculate the total price based on the ordered items
    private int calculateTotalPrice(MongoDatabase database, Document billDocument) {
        int totalPrice = 0;

        List<Document> orderList = (List<Document>) billDocument.get("order");
        if (orderList != null && !orderList.isEmpty()) {
            for (Document order : orderList) {
                Integer foodId = order.getInteger("foodId");
                Integer quantity = order.getInteger("quantity");

                if (foodId != null && quantity != null) {
                    Integer foodPrice = getFoodPriceFromMongoDB(database, foodId);
                    totalPrice += foodPrice * quantity;
                } else {
                    // Handle the case where foodId or quantity is null
                    System.err.println("Invalid data in the order.");
                    return 0; // Or handle it in an appropriate way
                }
            }
        }

        return totalPrice;
    }
    
        // Hàm để lấy tên món từ MongoDB dựa trên foodId
    private static String getFoodNameFromMongoDB(MongoDatabase database, int foodId) {
        MongoCollection<Document> foodCollection = database.getCollection("food");

        // Thực hiện truy vấn để lấy dữ liệu món ăn
        Document foodDocument = foodCollection.find(new Document("foodId", foodId)).first();

        // Lấy tên món từ Document
        if (foodDocument != null) {
            return foodDocument.getString("foodName");
        } else {
            return "Tên món không xác định";
        }
    }
    
  // Hàm để lấy giá món từ MongoDB dựa trên foodId
private static Integer getFoodPriceFromMongoDB(MongoDatabase database, int foodId) {
    MongoCollection<Document> foodCollection = database.getCollection("food");

    // Thực hiện truy vấn để lấy dữ liệu món ăn
    Document foodDocument = foodCollection.find(new Document("foodId", foodId)).first();

    // Lấy giá món từ Document
    if (foodDocument != null) {
        String priceAsString = foodDocument.getString("price");

        // Convert string price to Integer
        try {
            return Integer.parseInt(priceAsString);
        } catch (NumberFormatException e) {
            // Handle the case where the price is not a valid integer
            e.printStackTrace(); // Log the exception or handle it according to your needs
            return 0; // Return a default value or throw an exception as appropriate
        }
    } else {
        return 0; // Giá mặc định khi không tìm thấy giá món
    }
}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThanhToan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
